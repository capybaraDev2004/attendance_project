// attendance_project/frontend/src/pages/AdminDashboard.js
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './AdminDashboard.css';
// Import trang qu·∫£n l√Ω ng∆∞·ªùi d√πng
import UserManagement from './UserManagement';

// Trang qu·∫£n l√Ω d√†nh cho admin v·ªõi giao di·ªán hi·ªán ƒë·∫°i
const AdminDashboard = () => {
  const navigate = useNavigate();
  // C·∫≠p nh·∫≠t activeTab m·∫∑c ƒë·ªãnh th√†nh 'manage-users'
  const [activeTab, setActiveTab] = useState('manage-users');
  const [timeFilter, setTimeFilter] = useState('in'); // 'in' ho·∫∑c 'out'
  const [loading, setLoading] = useState(false);
  
  // State cho check in/out
  const [checkInData, setCheckInData] = useState({
    user_id: '',
    device_id: '',
    check_time: new Date().toISOString().slice(0, 16)
  });
  
  const [checkOutData, setCheckOutData] = useState({
    user_id: '',
    device_id: '',
    check_time: new Date().toISOString().slice(0, 16)
  });
  
  // State cho danh s√°ch users v√† devices
  const [users, setUsers] = useState([]);
  const [devices, setDevices] = useState([]);
  
  // State cho c√°c b·ªô l·ªçc
  const [filters, setFilters] = useState({
    startDate: new Date().toISOString().split('T')[0],
    endDate: new Date().toISOString().split('T')[0],
    startTime: '12:00',
    endTime: '23:59',
    selectedUser: 'all',
    selectedDevice: 'all'
  });

  // D·ªØ li·ªáu m·∫´u cho b·∫£ng l·ªãch s·ª≠ truy c·∫≠p
  const [attendanceData, setAttendanceData] = useState([]);

  // L·∫•y th√¥ng tin auth t·ª´ localStorage
  const raw = localStorage.getItem('auth');
  const auth = raw ? JSON.parse(raw) : null;

  // Menu items cho sidebar - ƒë∆∞a qu·∫£n l√Ω ng∆∞·ªùi d√πng l√™n ƒë·∫ßu, check in/out xu·ªëng d√≤ng 2
  const menuItems = [
    { id: 'manage-users', label: 'üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng', active: true },
    { id: 'check-in', label: '‚úÖ Check In/Out', active: false },
    { id: 'history', label: 'üìä L·ªãch s·ª≠ ra v√†o', active: false },
    { id: 'calculate', label: 'üìã T√≠nh c√¥ng', active: false },
    { id: 'devices', label: '‚öôÔ∏è Qu·∫£n l√Ω thi·∫øt b·ªã', active: false },
    { id: 'work-hours', label: '‚è∞ Gi·ªù l√†m vi·ªác', active: false },
    { id: 'positions', label: 'üëî Ch·ª©c v·ª•', active: false },
    { id: 'employee-status', label: 'üìà Trang th√°i nh√¢n vi√™n', active: false }
  ];

  // Fetch users v√† devices khi component mount
  useEffect(() => {
    fetchUsers();
    fetchDevices();
  }, []);

  // Fetch danh s√°ch users
  const fetchUsers = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/users');
      const data = await response.json();
      if (data.success) {
        setUsers(data.users);
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch users:', error);
    }
  };

  // Fetch danh s√°ch devices
  const fetchDevices = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/devices');
      const data = await response.json();
      if (data.success) {
        setDevices(data.devices);
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch devices:', error);
    }
  };

  // H√†m check in
  const handleCheckIn = async () => {
    if (!checkInData.user_id || !checkInData.device_id) {
      alert('Vui l√≤ng ch·ªçn nh√¢n vi√™n v√† thi·∫øt b·ªã');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('http://localhost:3001/api/attendance/check-in', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(checkInData),
      });

      const data = await response.json();
      
      if (data.success) {
        alert(`Check in th√†nh c√¥ng cho ${data.data.user_name}`);
        setCheckInData({
          user_id: '',
          device_id: '',
          check_time: new Date().toISOString().slice(0, 16)
        });
        // Refresh l·ªãch s·ª≠
        if (activeTab === 'history') {
          fetchAttendanceHistory();
        }
      } else {
        alert(data.message);
      }
    } catch (error) {
      console.error('L·ªói check in:', error);
      alert('L·ªói khi check in');
    } finally {
      setLoading(false);
    }
  };

  // H√†m check out
  const handleCheckOut = async () => {
    if (!checkOutData.user_id || !checkOutData.device_id) {
      alert('Vui l√≤ng ch·ªçn nh√¢n vi√™n v√† thi·∫øt b·ªã');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('http://localhost:3001/api/attendance/check-out', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(checkOutData),
      });

      const data = await response.json();
      
      if (data.success) {
        alert(`Check out th√†nh c√¥ng cho ${data.data.user_name}`);
        setCheckOutData({
          user_id: '',
          device_id: '',
          check_time: new Date().toISOString().slice(0, 16)
        });
        // Refresh l·ªãch s·ª≠
        if (activeTab === 'history') {
          fetchAttendanceHistory();
        }
      } else {
        alert(data.message);
      }
    } catch (error) {
      console.error('L·ªói check out:', error);
      alert('L·ªói khi check out');
    } finally {
      setLoading(false);
    }
  };

  // Fetch l·ªãch s·ª≠ attendance
  const fetchAttendanceHistory = async () => {
    try {
      const queryParams = new URLSearchParams({
        start_date: filters.startDate,
        end_date: filters.endDate,
        user_id: filters.selectedUser,
        device_id: filters.selectedDevice
      });

      const response = await fetch(`http://localhost:3001/api/attendance/history?${queryParams}`);
      const data = await response.json();
      
      if (data.success) {
        setAttendanceData(data.attendance);
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y l·ªãch s·ª≠ attendance:', error);
    }
  };

  // H√†m ƒëƒÉng xu·∫•t
  const logout = () => {
    localStorage.removeItem('auth');
    navigate('/login', { replace: true });
  };

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi b·ªô l·ªçc
  const handleFilterChange = (key, value) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };

  // H√†m l·ªçc d·ªØ li·ªáu
  const handleFilter = () => {
    fetchAttendanceHistory();
  };

  // H√†m xu·∫•t Excel
  const handleExportExcel = () => {
    console.log('Xu·∫•t file Excel');
    // Th√™m logic xu·∫•t Excel ·ªü ƒë√¢y
    alert('T√≠nh nƒÉng xu·∫•t Excel s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai!');
  };

  // H√†m render status badge
  const renderStatusBadge = (checkIn, checkOut) => {
    if (!checkIn) return <span className="status-pending">Ch∆∞a v√†o</span>;
    if (!checkOut) return <span className="status-working">ƒêang l√†m vi·ªác</span>;
    return <span className="status-complete">Ho√†n th√†nh</span>;
  };

  // H√†m render n·ªôi dung theo tab
  const renderTabContent = () => {
    switch (activeTab) {
      case 'manage-users':
        return <UserManagement />;
      case 'check-in':
        return (
          <>
            {/* Page Header */}
            <div className="page-header">
              <h1 className="page-title">CHECK IN/OUT CH·∫§M C√îNG</h1>
            </div>

            {/* Check In Section */}
            <div className="check-section">
              <h2 className="section-title">‚úÖ CHECK IN</h2>
              <div className="check-form">
                <div className="form-row">
                  <div className="input-group">
                    <label className="input-label">Ch·ªçn nh√¢n vi√™n:</label>
                    <select
                      className="form-select"
                      value={checkInData.user_id}
                      onChange={(e) => setCheckInData(prev => ({ ...prev, user_id: e.target.value }))}
                    >
                      <option value="">-- Ch·ªçn nh√¢n vi√™n --</option>
                      {users.map(user => (
                        <option key={user.userID} value={user.userID}>
                          {user.fullName} ({user.rfid_code || 'N/A'})
                        </option>
                      ))}
                    </select>
                  </div>
                  <div className="input-group">
                    <label className="input-label">Ch·ªçn thi·∫øt b·ªã:</label>
                    <select
                      className="form-select"
                      value={checkInData.device_id}
                      onChange={(e) => setCheckInData(prev => ({ ...prev, device_id: e.target.value }))}
                    >
                      <option value="">-- Ch·ªçn thi·∫øt b·ªã --</option>
                      {devices.map(device => (
                        <option key={device.device_id} value={device.device_id}>
                          {device.device_name} ({device.location})
                        </option>
                      ))}
                    </select>
                  </div>
                  <div className="input-group">
                    <label className="input-label">Th·ªùi gian check in:</label>
                    <input
                      type="datetime-local"
                      className="form-input"
                      value={checkInData.check_time}
                      onChange={(e) => setCheckInData(prev => ({ ...prev, check_time: e.target.value }))}
                    />
                  </div>
                </div>
                <button 
                  className="btn-check-in" 
                  onClick={handleCheckIn}
                  disabled={loading}
                >
                  {loading ? 'ƒêang x·ª≠ l√Ω...' : '‚úÖ CHECK IN'}
                </button>
              </div>
            </div>

            {/* Check Out Section */}
            <div className="check-section">
              <h2 className="section-title">üö™ CHECK OUT</h2>
              <div className="check-form">
                <div className="form-row">
                  <div className="input-group">
                    <label className="input-label">Ch·ªçn nh√¢n vi√™n:</label>
                    <select
                      className="form-select"
                      value={checkOutData.user_id}
                      onChange={(e) => setCheckOutData(prev => ({ ...prev, user_id: e.target.value }))}
                    >
                      <option value="">-- Ch·ªçn nh√¢n vi√™n --</option>
                      {users.map(user => (
                        <option key={user.userID} value={user.userID}>
                          {user.fullName} ({user.rfid_code || 'N/A'})
                        </option>
                      ))}
                    </select>
                  </div>
                  <div className="input-group">
                    <label className="input-label">Ch·ªçn thi·∫øt b·ªã:</label>
                    <select
                      className="form-select"
                      value={checkOutData.device_id}
                      onChange={(e) => setCheckOutData(prev => ({ ...prev, device_id: e.target.value }))}
                    >
                      <option value="">-- Ch·ªçn thi·∫øt b·ªã --</option>
                      {devices.map(device => (
                        <option key={device.device_id} value={device.device_id}>
                          {device.device_name} ({device.location})
                        </option>
                      ))}
                    </select>
                  </div>
                  <div className="input-group">
                    <label className="input-label">Th·ªùi gian check out:</label>
                    <input
                      type="datetime-local"
                      className="form-input"
                      value={checkOutData.check_time}
                      onChange={(e) => setCheckOutData(prev => ({ ...prev, check_time: e.target.value }))}
                    />
                  </div>
                </div>
                <button 
                  className="btn-check-out" 
                  onClick={handleCheckOut}
                  disabled={loading}
                >
                  {loading ? 'ƒêang x·ª≠ l√Ω...' : 'üö™ CHECK OUT'}
                </button>
              </div>
            </div>
          </>
        );
      case 'history':
        return (
          <>
            {/* Page Header */}
            <div className="page-header">
              <h1 className="page-title">L·ªäCH S·ª¨ TRUY C·∫¨P NG∆Ø·ªúI D√ôNG</h1>
            </div>

            {/* Filters Section */}
            <div className="filters-section">
              {/* L·ªçc theo ng√†y */}
              <div className="filter-group">
                <div className="filter-title">L·ªçc theo ng√†y</div>
                <div className="date-row">
                  <div className="input-group">
                    <label className="input-label">Ng√†y b·∫Øt ƒë·∫ßu:</label>
                    <input
                      type="date"
                      className="form-input"
                      value={filters.startDate}
                      onChange={(e) => handleFilterChange('startDate', e.target.value)}
                    />
                  </div>
                  <div className="input-group">
                    <label className="input-label">Ng√†y k·∫øt th√∫c:</label>
                    <input
                      type="date"
                      className="form-input"
                      value={filters.endDate}
                      onChange={(e) => handleFilterChange('endDate', e.target.value)}
                    />
                  </div>
                </div>
              </div>

              {/* L·ªçc theo User v√† thi·∫øt b·ªã */}
              <div className="filter-group">
                <div className="select-row">
                  <div className="input-group">
                    <label className="input-label">L·ªçc theo User:</label>
                    <select
                      className="form-select"
                      value={filters.selectedUser}
                      onChange={(e) => handleFilterChange('selectedUser', e.target.value)}
                    >
                      <option value="all">T·∫•t c·∫£ ng∆∞·ªùi d√πng</option>
                      {users.map(user => (
                        <option key={user.userID} value={user.userID}>
                          {user.fullName}
                        </option>
                      ))}
                    </select>
                  </div>
                  <div className="input-group">
                    <label className="input-label">L·ªçc theo thi·∫øt b·ªã:</label>
                    <select
                      className="form-select"
                      value={filters.selectedDevice}
                      onChange={(e) => handleFilterChange('selectedDevice', e.target.value)}
                    >
                      <option value="all">T·∫•t c·∫£ thi·∫øt b·ªã</option>
                      {devices.map(device => (
                        <option key={device.device_id} value={device.device_id}>
                          {device.device_name}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="action-buttons">
                <button className="btn-filter" onClick={handleFilter}>
                  üîç L·ªçc d·ªØ li·ªáu
                </button>
                <button className="btn-export" onClick={handleExportExcel}>
                  üìä Xu·∫•t File Excel
                </button>
              </div>
            </div>

            {/* Data Table */}
            <div className="table-container">
              {loading ? (
                <div className="loading">
                  ƒêang t·∫£i d·ªØ li·ªáu...
                </div>
              ) : (
                <table className="data-table">
                  <thead className="table-header">
                    <tr>
                      <th>ID</th>
                      <th>H·ªå T√äN</th>
                      <th>NG√ÄY</th>
                      <th>TH·ªúI GIAN V√ÄO</th>
                      <th>THI·∫æT B·ªä V√ÄO</th>
                      <th>TH·ªúI GIAN RA</th>
                      <th>THI·∫æT B·ªä RA</th>
                      <th>TR·∫†NG TH√ÅI</th>
                    </tr>
                  </thead>
                  <tbody className="table-body">
                    {attendanceData.map((record) => (
                      <tr key={record.attendance_id}>
                        <td>{record.attendance_id}</td>
                        <td>{record.fullName}</td>
                        <td>{new Date(record.work_date).toLocaleDateString('vi-VN')}</td>
                        <td>{record.check_in ? new Date(record.check_in).toLocaleTimeString('vi-VN') : '--'}</td>
                        <td>{record.device_in_name || '--'}</td>
                        <td>{record.check_out ? new Date(record.check_out).toLocaleTimeString('vi-VN') : '--'}</td>
                        <td>{record.device_out_name || '--'}</td>
                        <td>{renderStatusBadge(record.check_in, record.check_out)}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              )}
            </div>
          </>
        );
      default:
        return (
          <div className="page-header">
            <h1 className="page-title">T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn</h1>
          </div>
        );
    }
  };

  return (
    <div className="admin-container">
      {/* Sidebar */}
      <div className="sidebar">
        <div className="sidebar-header">
          <div className="admin-badge">ADMIN</div>
        </div>
        
        <nav className="sidebar-nav">
          <ul className="sidebar-menu">
            {menuItems.map((item) => (
              <li key={item.id} className="menu-item">
                <a
                  href="#"
                  className={`menu-link ${item.id === activeTab ? 'active' : ''}`}
                  onClick={(e) => {
                    e.preventDefault();
                    setActiveTab(item.id);
                  }}
                >
                  {item.label}
                </a>
              </li>
            ))}
            
            {/* Menu ƒëƒÉng xu·∫•t */}
            <li className="menu-item">
              <a
                href="#"
                className="menu-link logout"
                onClick={(e) => {
                  e.preventDefault();
                  logout();
                }}
              >
                üö™ ƒêƒÉng xu·∫•t
              </a>
            </li>
          </ul>
        </nav>
      </div>

      {/* Main Content */}
      <div className="main-content">
        {renderTabContent()}
      </div>
    </div>
  );
};

export default AdminDashboard;
