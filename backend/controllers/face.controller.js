// backend/controllers/face.controller.js
const { getDb } = require('../config/mongo');

// Validate m·∫£ng descriptor g·ªìm 128 s·ªë
function validateDescriptor(input) {
  console.log('üîç Validating descriptor, type:', typeof input, 'isArray:', Array.isArray(input), 'length:', input?.length);
  if (!Array.isArray(input) || input.length !== 128) {
    console.log('‚ùå Descriptor validation failed: not array or wrong length');
    return null;
  }
  const arr = input.map((v) => Number(v));
  if (arr.some((v) => !Number.isFinite(v))) {
    console.log('‚ùå Descriptor validation failed: contains non-finite numbers');
    return null;
  }
  console.log('‚úÖ Descriptor validation passed');
  return arr;
}

// POST /api/face/enroll
// Body: { userID, fullName, descriptor }
async function enrollFace(req, res, next) {
  console.log('üì∏ === FACE ENROLL API CALLED ===');
  console.log('üì• Request body keys:', Object.keys(req.body));
  console.log('üì• UserID:', req.body.userID, 'type:', typeof req.body.userID);
  console.log('üì• FullName:', req.body.fullName);
  console.log('üì• Descriptor preview:', req.body.descriptor?.slice(0, 5), '... (first 5 elements)');

  try {
    const { userID, fullName, descriptor } = req.body;

    // Validate c∆° b·∫£n
    if (userID === undefined || userID === null) {
      console.log('‚ùå Validation failed: missing userID');
      return res.status(400).json({ success: false, message: 'Thi·∫øu userID.' });
    }
    if (!fullName || typeof fullName !== 'string') {
      console.log('‚ùå Validation failed: invalid fullName');
      return res.status(400).json({ success: false, message: 'Thi·∫øu fullName h·ª£p l·ªá.' });
    }

    // Chu·∫©n h√≥a userID v·ªÅ number n·∫øu c√≥ th·ªÉ, n·∫øu kh√¥ng th√¨ gi·ªØ nguy√™n
    const normalizedUserID = Number.isFinite(Number(userID)) ? Number(userID) : String(userID);
    console.log('üîÑ Normalized userID:', normalizedUserID, 'type:', typeof normalizedUserID);

    const vector128 = validateDescriptor(descriptor);
    if (!vector128) {
      return res.status(400).json({
        success: false,
        message: 'descriptor ph·∫£i l√† m·∫£ng 128 s·ªë h·ª£p l·ªá.'
      });
    }

    console.log('‚úÖ All validations passed, connecting to MongoDB...');

    // K·∫øt n·ªëi MongoDB v·ªõi timeout
    const db = await Promise.race([
      getDb(),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('MongoDB connection timeout')), 10000)
      )
    ]);

    console.log('‚úÖ MongoDB connected successfully');
    
    const collection = db.collection('face_templates');

    // T·∫°o index duy nh·∫•t cho userID (kh√¥ng await ƒë·ªÉ tr√°nh treo)
    collection.createIndex({ userID: 1 }, { unique: true }).catch(err => {
      console.warn('‚ö†Ô∏è Index creation warning:', err.message);
    });

    const now = new Date();
    console.log('üíæ Saving to MongoDB...');
    
    const result = await collection.updateOne(
      { userID: normalizedUserID },
      {
        $set: {
          userID: normalizedUserID,
          fullName,
          descriptor: vector128,
          updatedAt: now
        },
        $setOnInsert: {
          createdAt: now
        }
      },
      { upsert: true }
    );

    console.log('‚úÖ MongoDB save result:', {
      acknowledged: result.acknowledged,
      matchedCount: result.matchedCount,
      modifiedCount: result.modifiedCount,
      upsertedCount: result.upsertedCount,
      upsertedId: result.upsertedId
    });

    const responseData = {
      success: true,
      message: result.upsertedCount > 0 ? 'ƒê√£ t·∫°o d·ªØ li·ªáu khu√¥n m·∫∑t.' : 'ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu khu√¥n m·∫∑t.',
      userID: normalizedUserID,
      timestamp: now.toISOString()
    };

    console.log('üì§ Sending response:', responseData);
    return res.json(responseData);

  } catch (err) {
    console.error('‚ùå ERROR in enrollFace:', err);
    console.error('‚ùå Error stack:', err.stack);
    
    // Tr·∫£ l·ªói c·ª• th·ªÉ thay v√¨ ƒë·∫©y cho middleware
    return res.status(500).json({
      success: false,
      message: err.message || 'L·ªói m√°y ch·ªß khi l∆∞u d·ªØ li·ªáu khu√¥n m·∫∑t',
      error: process.env.NODE_ENV === 'development' ? err.stack : undefined
    });
  }
}

// GET /api/face/enrollments
// L·∫•y danh s√°ch t·∫•t c·∫£ ƒëƒÉng k√Ω khu√¥n m·∫∑t
async function getEnrollments(req, res, next) {
  console.log('üìã === GET ENROLLMENTS API CALLED ===');
  
  try {
    console.log('üîÑ Connecting to MongoDB...');
    
    // K·∫øt n·ªëi MongoDB v·ªõi timeout
    const db = await Promise.race([
      getDb(),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('MongoDB connection timeout')), 10000)
      )
    ]);

    console.log('‚úÖ MongoDB connected successfully');
    
    const collection = db.collection('face_templates');
    
    console.log('üîç Querying face_templates collection...');
    
    // L·∫•y t·∫•t c·∫£ ƒëƒÉng k√Ω, ch·ªâ tr·∫£ v·ªÅ th√¥ng tin c·∫ßn thi·∫øt (kh√¥ng tr·∫£ v·ªÅ descriptor)
    const enrollments = await collection.find({}, {
      projection: {
        userID: 1,
        fullName: 1,
        createdAt: 1,
        updatedAt: 1,
        _id: 0 // Kh√¥ng tr·∫£ v·ªÅ _id
      }
    }).sort({ createdAt: -1 }).toArray(); // S·∫Øp x·∫øp theo ng√†y t·∫°o m·ªõi nh·∫•t

    console.log('‚úÖ Found', enrollments.length, 'enrollments');

    const responseData = {
      success: true,
      enrollments: enrollments,
      count: enrollments.length
    };

    console.log('üì§ Sending response with', enrollments.length, 'enrollments');
    return res.json(responseData);

  } catch (err) {
    console.error('‚ùå ERROR in getEnrollments:', err);
    console.error('‚ùå Error stack:', err.stack);
    
    return res.status(500).json({
      success: false,
      message: err.message || 'L·ªói m√°y ch·ªß khi l·∫•y danh s√°ch ƒëƒÉng k√Ω khu√¥n m·∫∑t',
      error: process.env.NODE_ENV === 'development' ? err.stack : undefined
    });
  }
}

// POST /api/face/attendance
// Body: { descriptor }
async function faceAttendance(req, res, next) {
  console.log('üì∏ === FACE ATTENDANCE API CALLED ===');
  console.log('üì• Request body keys:', Object.keys(req.body));
  console.log(' Descriptor preview:', req.body.descriptor?.slice(0, 5), '... (first 5 elements)');

  try {
    const { descriptor } = req.body;

    // Validate descriptor
    const vector128 = validateDescriptor(descriptor);
    if (!vector128) {
      return res.status(400).json({
        success: false,
        message: 'descriptor ph·∫£i l√† m·∫£ng 128 s·ªë h·ª£p l·ªá.'
      });
    }

    console.log('‚úÖ Descriptor validation passed, connecting to MongoDB...');

    // K·∫øt n·ªëi MongoDB ƒë·ªÉ t√¨m khu√¥n m·∫∑t kh·ªõp
    const db = await Promise.race([
      getDb(),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('MongoDB connection timeout')), 10000)
      )
    ]);

    console.log('‚úÖ MongoDB connected successfully');
    
    const collection = db.collection('face_templates');

    // T√¨m khu√¥n m·∫∑t kh·ªõp nh·∫•t
    console.log('üîç Searching for matching face...');
    
    let bestMatch = null;
    let bestDistance = Infinity;
    const threshold = 0.6; // Ng∆∞·ª°ng kho·∫£ng c√°ch Euclidean

    // L·∫•y t·∫•t c·∫£ templates ƒë·ªÉ so s√°nh
    const templates = await collection.find({}, { 
      projection: { userID: 1, fullName: 1, descriptor: 1 } 
    }).toArray();

    console.log(`üîç Found ${templates.length} face templates to compare`);

    // So s√°nh v·ªõi t·ª´ng template
    for (const template of templates) {
      if (!template.descriptor || template.descriptor.length !== 128) {
        console.warn(`‚ö†Ô∏è Template ${template.userID} c√≥ descriptor kh√¥ng h·ª£p l·ªá`);
        continue;
      }

      // T√≠nh kho·∫£ng c√°ch Euclidean
      let distance = 0;
      for (let i = 0; i < 128; i++) {
        const diff = vector128[i] - template.descriptor[i];
        distance += diff * diff;
      }
      distance = Math.sqrt(distance);

      console.log(`üìä Template ${template.userID} (${template.fullName}): distance = ${distance.toFixed(4)}`);

      if (distance < bestDistance) {
        bestDistance = distance;
        bestMatch = template;
      }
    }

    console.log(` Best match: ${bestMatch ? bestMatch.fullName : 'None'}, distance: ${bestDistance.toFixed(4)}`);

    // Ki·ªÉm tra ng∆∞·ª°ng kho·∫£ng c√°ch
    if (!bestMatch || bestDistance > threshold) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t kh·ªõp. Vui l√≤ng ƒëƒÉng k√Ω khu√¥n m·∫∑t tr∆∞·ªõc.'
      });
    }

    console.log(`‚úÖ Face match found: ${bestMatch.fullName} (ID: ${bestMatch.userID})`);

    // X√°c ƒë·ªãnh lo·∫°i ch·∫•m c√¥ng (check-in ho·∫∑c check-out)
    const currentDate = new Date().toISOString().split('T')[0];
    const currentTime = new Date().toISOString();
    
    // S·ª≠ d·ª•ng MySQL ƒë·ªÉ l∆∞u l·ªãch s·ª≠ ch·∫•m c√¥ng
    const { pool } = require('../config/database');
    
    try {
      // Ki·ªÉm tra tr·∫°ng th√°i ch·∫•m c√¥ng trong ng√†y
      const [existingRecords] = await pool.execute(
        'SELECT * FROM attendance WHERE user_id = ? AND work_date = ?',
        [bestMatch.userID, currentDate]
      );

      let attendanceType = 'check_in';

      if (existingRecords.length > 0) {
        if (!existingRecords[0].check_in) {
          // Ch∆∞a check-in, th·ª±c hi·ªán check-in
          attendanceType = 'check_in';
          await pool.execute(
            'UPDATE attendance SET check_in = ?, device_in_id = ?, updated_at = NOW() WHERE attendance_id = ?',
            [currentTime, 'face_recognition', existingRecords[0].attendance_id]
          );
        } else if (!existingRecords[0].check_out) {
          // ƒê√£ check-in, th·ª±c hi·ªán check-out
          attendanceType = 'check_out';
          await pool.execute(
            'UPDATE attendance SET check_out = ?, device_out_id = ?, updated_at = NOW() WHERE attendance_id = ?',
            [currentTime, 'face_recognition', existingRecords[0].attendance_id]
          );
        } else {
          // ƒê√£ check-in v√† check-out
          return res.status(400).json({
            success: false,
            message: 'B·∫°n ƒë√£ ho√†n th√†nh ch·∫•m c√¥ng trong ng√†y h√¥m nay.'
          });
        }
      } else {
        // T·∫°o b·∫£n ghi m·ªõi (check-in)
        attendanceType = 'check_in';
        await pool.execute(
          'INSERT INTO attendance (user_id, work_date, check_in, device_in_id) VALUES (?, ?, ?, ?)',
          [bestMatch.userID, currentDate, currentTime, 'face_recognition']
        );
      }

      console.log(`‚úÖ Attendance recorded in MySQL: ${attendanceType} for ${bestMatch.fullName}`);

      const responseData = {
        success: true,
        message: `Ch·∫•m c√¥ng ${attendanceType === 'check_in' ? 'gi·ªù v√†o' : 'gi·ªù ra'} th√†nh c√¥ng!`,
        data: {
          userID: bestMatch.userID,
          fullName: bestMatch.fullName,
          type: attendanceType,
          check_time: currentTime,
          work_date: currentDate
        }
      };

      console.log('üì§ Sending response:', responseData);
      return res.json(responseData);

    } catch (mysqlError) {
      console.error('‚ùå MySQL error:', mysqlError);
      throw new Error('L·ªói khi l∆∞u l·ªãch s·ª≠ ch·∫•m c√¥ng v√†o c∆° s·ªü d·ªØ li·ªáu.');
    }

  } catch (err) {
    console.error('‚ùå ERROR in faceAttendance:', err);
    console.error('‚ùå Error stack:', err.stack);
    
    return res.status(500).json({
      success: false,
      message: err.message || 'L·ªói m√°y ch·ªß khi ch·∫•m c√¥ng b·∫±ng khu√¥n m·∫∑t',
      error: process.env.NODE_ENV === 'development' ? err.stack : undefined
    });
  }
}

module.exports = { enrollFace, getEnrollments, faceAttendance };
